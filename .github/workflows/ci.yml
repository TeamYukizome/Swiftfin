name: "Build ðŸ”¨"

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   types:
  #     - opened
  #     - reopened
  #     - synchronize
  #     - ready_for_review
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: "Build ðŸ”¨"
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        scheme:
          # - "Swiftfin"
          - "Swiftfin tvOS"

    runs-on: macos-14

    steps:    
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SwiftGen
        run: brew install swiftgen

      - name: Set Xcode Version
        run: sudo xcode-select -s "/Applications/Xcode_15.3.app"

      - name: Cache Carthage
        uses: actions/cache@v4
        id: carthage-cache
        with:
          path: Carthage
          key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
          restore-keys: ${{ runner.os }}-carthage-

      - name: Update Carthage
        run: carthage update --use-xcframeworks --cache-builds

      # FIXME: caches would keep failed compiles?

      # - name: Cache Swift packages
      #   uses: actions/cache@v4
      #   with:
      #     path: PackageCache
      #     key: ${{ runner.os }}-${{ matrix.scheme }}-spm-${{ hashFiles('**/Package.resolved') }}
      #     restore-keys: ${{ runner.os }}-${{ matrix.scheme }}-spm-

      - name: Build
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          retry_on: error
          timeout_minutes: 60
          command: |
            xcodebuild clean build -project "Swiftfin.xcodeproj" \
            -scheme "${{ matrix.scheme }}" \
            -clonedSourcePackagesDirPath PackageCache \
            -configuration Release \
            -derivedDataPath build/derived_data \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

      - name: Create Payload Directory
        run: mkdir -p build/Payload

      - name: Copy App to Payload
        run: cp -r build/derived_data/Build/Products/Release-appletvos/"Swiftfin tvOS.app" build/Payload

      - name: Fake Code Sign the App
        run: ldid -S build/Payload/"Swiftfin tvOS.app"/"Swiftfin tvOS"

      - name: Package IPA
        run: |
          cd build
          zip -r Swiftfin-tvOS.ipa Payload

      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: Swiftfin-tvOS-ipa
          path: build/Swiftfin-tvOS.ipa
